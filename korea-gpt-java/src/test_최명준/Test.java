package test;

// 1번 문제(틀렸음)
// - 값 자체를 저장하는 타입

// - 메모리의 주소를 저장하는 타입
// 추가메서드와 기능을 제공

// 6번 문제
// : Object: 자바의 모든 클래스는 암시적으로 Object 클래스를 상속받음
// Object 클래스가 가진 toString(), equals() 등의 메서드를 기본적으로 가짐

// 7번 문제(틀렸음)
// : size() - 리스트에 저장된 요소의 개수를 반환

// 8번 문제
// : 삼항연산자 - 조건식 ? "   " : "    "
// int result = (a > b) ? a : b;
// if문 이라면 논리연산자도 가능하다.

// 9번 문제(틀렸음)
// : 4(생성자) 인터페이스는 구조를 정의 하기에 생성자를 쓰지 않는다.
// 추상메서드, default 메서드, static(정적)메서드는 인터페이스에서 가질 수 있다.
// 객체 자체도 가질 수 없기에 생성자 또한 가질 수 없다.
// private 메서드 - 접근제어자가 생략된 메서드의 경우 기본으로 public abstract 으로만 선언
// default 와 static 메서드에서 private 접근제어자 사용이 가능
// private 메서드는 인터페이스 내부에서만 호출 가능

// 10번 문제
// : 2
// 단 하나의 추상 메서드만 허용 / default 와 static 메서드에 대한 추가 정의가 불가!

// 11번 문제
// : Child
// Child 클래스에서 display()메서드를 재정의 했기 때문에 실행 시점에는 실제 객체의 메서드가 호출
// 업캐스팅된 객체에서 메서드를 호출할 때는 오버라이딩된 메서드가 실행 - 동적 바인딩
// cf) 업캐스팅에서 자식 메서드 실행가능여부
// 1) 오버라이딩 된 메서드:
// 부모클래스에서 정의된 메서드를 자식 클래스에서 오버라이딩한 경우, 자식 클래스의 메서드가 호출
// 업캐스팅과 상관없이 실체 객체(Child)의 메서드가 실행

// 2) 자식만이 가진 고유 메서드
// 업캐스팅 된 상태에서는 부모 객체 변수로 자식 클래스의 고유 메서드 호출이 불가
// 자식 메서드 호출 시 다운캐스팅이 필요

// 12번 문제
// : 1

// 13번 문제
// : 2
// 자식클래스가 추상 메서드를 모두 구현한 후에 객체 생성이 가능

// 14번 문제(틀렸음)
// : 업캐스팅 부터 해야 한다
// 인스턴스오브를 해야 한다.

// 15번 문제
// : 2
// 필드가 많거나 생성자 매개변수가 복잡한 객체를 쉽게 생성하도록 도와줌

// 16번 문제
// : 3
// 사용자 입력을 처리하고, 모델과 뷰를 연결하는 역할
// 상호작용은 View

// 17번 문제
// : public
// 자바9부터 private을 인터페이스에서 사용 가능

// 18번 문제(틀렸음)
// : 4
// 추상 클래스는 static메서드를 가질 수 있음
// 인터페이스도 static 메서드를 가질 수 있음

// 19번

// 보완이 필요한 파트: chapter1(연산자), 2(for문) ArrayList와 Array, List 부분
// 어려운 파트: 싱글톤패턴, 빌더패턴,

// final 은 변수와 비교해야하며 상수를 가짐

// 20번
// : 원신희강사님께 자바를 배웠는데 다 까먹어버리고
//   자바를 다시 보니까 모르겠고
//   이해는 되는 것 같은데 시험치면 못 적는거 보니까
//   완전하게 이해하는 것도 아니고,
//   날잡고 통째로 외울 수 있는 부분만 외우면 될 거 같긴 하고,
//   5번 코드 구현 문제도 반복문 사용하라니까 그건 또 모르겠고...
//   잘 할 수 있을까 싶습니다...
//   좋은점, 개선 점을 얘기하라 하셨지만,
//   자바를 못하는데 좋은점이나 개선 점이 있을리가요 ㅎ
//   강사님은 좋은데 제가 못따라가는게 문제가 아닐지..


import java.util.Scanner;

public class Test {
    public static void main(String[] args) {
        // 2번 문제
        int num1 = 10;
        double num2 = 3.5;
        double result = num1 + num2;

        System.out.println(result);

        // 3번 문제
        Scanner sc = new Scanner(System.in);
        System.out.print("숫자를 입력하세요");
        int a = sc.nextInt();
        if (a % 2 == 0) {
            System.out.println("입력하신 숫자는 짝수입니다");
        } else {
            System.out.println("입력하신 숫자는 홀수입니다.");
        }

        // 4번 문제
        int[] numbers = {1,2,3,4,5};
        for (int num : numbers) {
            System.out.println(num);
        }

        // 5번 문제
        // : class Test 바로 위에 클래스를 작성하고 main 메서드 내부에서 객체를 생성하세요.


    }
}
